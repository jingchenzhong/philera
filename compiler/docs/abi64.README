Data Types:
Elf64_Addr 8 Unsigned program address
Elf64_Half 2 Unsigned small integer
Elf64_Off 8 Unsigned file offset
Elf64_Sword 4 Signed medium integer
Elf64_Sxword 8 Signed large integer
Elf64_Word 4 Unsigned medium integer
Elf64_Xword 8 Unsigned medium integer
Elf64_Byte 1 Unsigned tiny integer
Elf64_Section 2 Section index (unsigned)

Fundamental Data Types:
FT_unknown 0x0001
FT_signed_char 0x0001 8-bit signed char
FT_unsigned_char 0x0002 8-bit unsigned char
FT_signed_short 0x0003 16-bit signed short
FT_unsigned_short 0x0004 16-bit unsigned short
FT_signed_int32 0x0005 32-bit signed int
FT_unsigned_int32 0x0006 32-bit unsigned int
FT_signed_int64 0x0007 64-bit signed long
FT_unsigned_int64 0x0008 64-bit unsigned long
FT_pointer32 0x0009 32-bit pointer
FT_pointer64 0x000a
FT_float32 0x000b
FT_float64 0x000c
FT_float128 0x000d
FT_complex64 0x000e
FT_complex128 0x000f
FT_complex256 0x0010
FT_void 0x0011
FT_bool32 0x0012
FT_bool64 0x0013
FT_label32 0x0014
FT_label64 0x0015

FT_struct 0x0020
FT_union 0x0021
FT_enum 0x0022
FT_typedef 0x0023
FT_set 0x0024 Pascal:set
FT_range 0x0025 Pascal:subrange of integer
FT_member_ptr 0x0026 C++:member pointer
FT_virtual_ptr 0x0027 C++:virtual pointer
FT_class 0x0028 C++:class


Type Qualifiers:
MOD_pointer_to 0x01
MOD_reference_to 0x02
MOD_const 0x03
MOD_volatile 0x04

MOD_lo_user 0x80
MOD_function 0x80
MOD_array_of 0x81
MOD_hi_user 0xff

.MIPS.events and .MIPS.content using:
LEB128, ULEB128 - (Unsigned) Little-Endian Base 128 numbers
aa = 0x00003239 = 0000 0000 0000 0000 0011 0010 0011 1001
start at the low-order end of an unsigned integer and chop it
into 7-bit chunks, place each chunk into the low-order 7 bits
of a byte.
byte0 = _011 1001 = 0x39
the high order bit on each byte except the last emitted byte
byte0 = 1011 1001 = 0xB9
several of the high-order bytes will be zero (unsigned) or copies
of the sign bit (signed)
aa = 0000 000_0 0000 0000 0000 0000 0110 0100
byte1 = _110 0100 = 0x64

result: B9 64

do {
    byte = low order 7 bits of value;
    value >>= 7;
    if (value != 0)
        set high order bit of byte;
    emit byte
} while (vaule != 0);

result = 0;
shitf = 0;
size = no, of bits in signed interger;
while (true) {
    byte = next byte in input;
    result |= (low order)
}


ELF-64 Header:
e_ident[EI_NIDENT] unsigned char
e_type Elf64_Half
e_machine Elf64_Half
e_version Elf64_Word
e_entry Elf64_Addr
e_phoff Elf64_Off
e_shoff Elf64_Off
e_flags Elf64_Word
e_ehsize Elf64_Half
e_phentsize Elf64_Half
e_phnum Elf64_Half
e_shentsize Elf64_Half
e_shnum Elf64_Half
e_shstrndx Elf64_Half

ELF-64 Header: e_ident[]
EI_MAG0-3
EI_CLASS
EI_DATA
EI_VERSION
EI_PAD

ELF-64 Header: e_flags
EF_MIPS_NOREORDER
EF_MIPS_PIC 
EF_MIPS_CPIC
EF_MIPS_UCODE
EF_MIPS_ABI2
EF_MIPS_OPTIONS_FIRST
EF_MIPS_ARCH_ASE
EF_MIPS_ARCH_ASE_MDMX
EF_MIPS_ARCH_ASE_M16
EF_MIPS_ARCH

ELF-64 Section Header:
sh_name Elf64_Word
sh_type Elf64_Word
sh_flags Elf64_XWord
sh_addr Elf64_Addr
sh_offset Elf64_Off
sh_size Elf64_Xword
sh_link Elf64_Word
sh_info Elf64_Word
sh_addralign Elf64_Xword
sh_entsize Elf64_Xword

Section Header sh_type:
SHT_NULL 0 无效段
SHT_PROGBITS 1 程序段，代码段，数据段都是这种类型
SHT_SYMTAB 2 符号表
SHT_STRTAB 3 字符串表
SHT_RELA 4 带直接地址的重定位表
SHT_HASH 5 符号表的哈希表
SHT_DYNAMIC 6 动态链接信息
SHT_NOTE 7 提示性信息
SHT_NOBITS 8 该段在文件中没有内容，例如.bss段
SHT_REL 9 不带直接地址的重定位信息
SHT_SHLIB 10 保留
SHT_DNYSYM 11 动态链接符号表

SHT_MIPS_LIBLIST 0x70000000 DSO库信息
SHT_MIPS_MSYM 0x70000001 MIPS符号表扩展
SHT_MIPS_CONFILICT 0x70000002 带有DSO定义符号的符号冲突
SHT_MIPSGPTAB 0x70000003 全局指针表
SHT_MIPS_UCODE 0x70000004 保留
SHT_MIPS_DEBUG 0x70000005 保留
SHT_MIPS_REGINFO 0x70000006 寄存器使用信息
SHT_MIPS_PACKAGE 0x70000007 OSF保留
SHT_MIPS_PACKSYM 0x70000008 OSF保留
SHT_MIPS_RELD 0x70000009 动态重定位
unused 0x7000000a
SHT_MIPS_IFACE 0x7000000b 子程序接口信息
SHT_MIPS_CONTENT 0x7000000c 段信息分类
SHT_MIPS_OPTIONS 0x7000000d 通用选项
SHT_MIPS_DELTASYM 0x7000001b Delta C++:符号表
SHT_MIPS_DELTAINST 0x7000001c Delta C++:实例表
SHT_MIPS_DELTACLASS 0x7000001d Delta C++:类表
SHT_MIPS_DWARF 0x7000001e DWARF调试信息
SHT_MIPS_DELTADECL 0x7000001f Delta C++:声明
SHT_MIPS_SYMBOL_LIB 0x70000020 符号到库映射
SHT_MIPS_EVENTS 0x70000021 事件定位
SHT_MIPS_TRANSLATE 0x70000022 ???
SHT_MIPS_PIXIE 0x7000002e 特定pixie段
SHT_MIPS_XLATE 0x70000024 地址翻译表
SHT_MIPS_XLATE_DEBUG 0x70000025 SGI内部地址翻译表
SHT_MIPS_WHIRL 0x700000026 媒介代码
SHT_MIPS_EN_REGION 0x70000027 C++异常处理区域信息
SHT_MIPS_XLATE_OLD 0x70000028 废弃
SHT_MIPS_PDR_EXCEPTION 0x70000029 运行时程序描述符

sh_flag:
SHF_WRITE
SHF_ALLOC 该段在进程空间中须分配空间
SHF_EXECINSTR

sh_link, sh_info: 如果段类型是跟链接相关的才有意义：
SHT_DYNAMIC 该段使用的字符串在段表中的下标 0
SHT_HASH   同上 0
SHT_REL 该段使用的相应符号表在段表中的下标 该重定位表所作用的段在段表中的下标
SHT_RELA 同上 0
SHT_SYMTAB 操作系统相关 
SHT_DYNSYM
other SHN_UNDEF 0 

.text 代码段 SHT_PROGBITS SHF_ALLOC+SHF_EXECINSTR
.bss 未初始化数据段 SHT_NOBITS SHF_ALLOC+SHF_WRITE
.data 初始化数据段 SHT_PROGBITS SHF_ALLOC+SHF_WRITE
.data1  SHT_PROGBITS SHF_ALLOC_SHF_WRITE
.rodata 只读数据 SHT_PROGBITS SHF_ALLOC
.rodata1  SHT_PROGBITS SHF_ALLOC
.comment 编译器版本信息 SHT_PROGBITS none
.debug 调试信息  SHT_PROGBITS none
.dynamic 动态链接信息 SHT_DYNMIC SHF_ALLOC+SHF_WRITE
.hash 符号哈希表 SHT_HASH SHF_ALLOC
.line 调试时行号 SHT_PROGBITS none
.note 额外编译信息 SHT_NOTE none
.strtab 字符串表 SHT_STRTAB SHF_ALLOC maybe
.symtab 符号表 SHT_SYMTAB SHF_ALLOC maybe
.shstrtab 段名表 SHT_STRTAB none
.plt 动态链接跳转表
.got 全局入口表
.init 程序初始化代码段
.fini 程序终结代码段



自定义段名不能带., ELF可以拥有多个同名段
