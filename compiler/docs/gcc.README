编译过程：
hello.c
            propressing (cpp) -> preprocessed (hello.i) -> compilation (gcc) -> assembly (hello.s)
stdio.h
--> assembly (as) --> obj files (hello.o) 
                                             --> Linking (ld) --> executable (a.out)
                      static library libc.a

source code -> scanner -> Tokens -> Parser -> Syntax Tree -> semantic analyzer -> commented syntax tree
-> source code optimizer -> intermediate representation -> code generator -> target code -> code optimizer
-> final target code

#预编译： 
gcc -E hello.c -o hello.i || cpp hello.c > hello.i
#编译：
gcc -S hello.i -o hello.s
预编译和编译合成一步：/usr/lib/gcc/i686-pc-linux-gnu/4.7.0/cc1 hello.c || gcc -S hello.c -o hello.s
汇编：as hello.s -o hello.o || gcc -c hello.s -o hello.o
预编译，编译和汇编合成一步：gcc -c hello.c -o hello.o
链接：ld -static /usr/lib/crt1.o /usr/lib/crti.o /usr/lib/gcc/i686-linux-gnu/4.7.0/crtbeginT.o -L/usr/lib/gcc/i686-linux-gnu/4.7.0 -L/usr/lib -L/lib hello.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/i686-linux-gnu/4.7.0/crtend.o /usr/lib/crtn.o
ld -static crt1.o crti.o crtbeginT.o hello.o -start-group -lgcc -lgcc_eh -lc -end-group crtend.o crtn.o


如何添加自定义段：
__attribute__((section("FOO"))) int global = 43;
__attribute__((section("BAR"))) void foo () {}



C++编译器提供了extern "C" 有一个声明或定义C的符号
C++定义了宏__cplusplus来区别C编译器
比如
#ifdef __cplusplus
extern "C" {
#endif
    void *memset (void*, int, size_t);

#ifdef __cplusplus
}
#endif


弱符号和强符号：
编译器默认任何函数和初始化了的全局变量为强符号，可以使用
__attribute__((weak))来定义弱符号
不允许强符号被定义多次
如果一个符号在目标文件里是强符号，其它文件中是弱符号，选择强符号
如果一个符号在所有目标文件中都是弱符号，选择占空间最大的一个

弱引用和强引用：
链接器不认为未定义的弱符号是错误，链接器默认其值为0.
GCC可使用__attribute__((weakref)) void foo();声明对一个外部符号使用弱引用。

弱符号可以让用户定义自己版本的库函数
或者用户弱引用某些扩展功能的函数，去掉某些功能也能正常链接。





自定义段：
__attribute__((section("FOO"))) int global=42;
__attribute__((section("BAR"))) void foo()
{
}

.data保存了初始化了的全局静态变量和局部静态变量
.rodata保存了只读数据，一般是const修饰变量和字符串常量
.bss段存放未初始化的全局变量和局部静态变量。有些编译器会将
全局未初始化变量放在.bss里，有些则是预留一个未定义的全局变量符号
等到最终链接时再放入.bss段。编译单元内的可见静态变量是放在
.bss段的

static int x1 = 0;
static int x2 = 1;
因为x1初始化为0,可认为没有初始化，所以放在.bss段，不占空间
而x2确实初始化为1,因此放在.data段


链接器使用两步链接：
第一步：空间与地址分配： 扫描所有的输入目标文件，并获取他们各个段长度，属性和位置，
并且将输入目标文件中的符号表中所有符号定义和符号引用收集起来，统一放在
一个全局符号表，这一步中，链接器将能够获得所有输入目标文件的段长度，并将他们合并，计算出文件中各个段合并后的长度和位置，并
建立映射关系。
第二步：符号解析与重定位：读取输入文件中的段的数据，重定位信息，并进行
符号解析与重定位，调整代码中的地址。

符号地址的确定：
第一步的扫描和空间分配，链接器按照上述方法进行分配，那么这时各段在链接后的虚拟地址就确定了，然后根据各符号在各段内偏移调整地址


重定位：
OFFSET TYPE VALUE
指令修成方法：

crt1.o: __start, hlt
crti.o: _init, _fini
crtbegin.o: __do_global_dtors_aux, frame_dummy, .fini .init
crtend.o: __do_global_ctors_aux, .init

ld crt1.o crti.o [user_objs] [system_libraries] crtn.o

GCC的"-fno-common"允许把所有未初始化全局变量不以COMMON块的形式处理，或者使用__attribute__扩展：
int global __attribute__((nocommon));，一旦一个未初始化的全局变量不以COMMON块形式存在，他们相当于一个强符号。


弱符号和弱引用：库中定义的弱符号可以被用户定义的强符号所覆盖，从而使程序
使用自定义版别的库函数，或者程序可以对某些扩展功能模块的应用定义为弱引用，
当我们将扩展模块与程序链接在一起时，功能模块就可以正常使用。如果去掉某些功能，
那么程序可以正常链接。

#include <stdio.h>
#include <pthread.h>
int pthread_create(pthread_t *, 
        const pthread_attr_t*,
        void * (*) (void *),
        void *) __attribute__ ((weak));
int main ()
{
    if (pthread_create) {
        printf ("This is multi-thread version\n");
    } else {
        printf ("This is single-thread version\n");
    }
}



GCC的"-fno-common"允许把所有未初始化全局变量不以COMMON块的形式处理，或者使用__attribute__扩展：
int global __attribute__((nocommon));，一旦一个未初始化的全局变量不以COMMON块形式存在，他们相当于一个强符号。


由于现在的库都很大，一个目标文件包含很多函数，当我们需要用到某个目标文件中的一个函数或变量，就需要把它整个链接进去，为了不链接哪些没有用的函数。GCC提供了两个选项"-ffunction-sections"和"-fdata-sections"将每个函数和变量分别保持到独立的段中。

GCC会将只使用一个字符串的参数printf替换为内建的puts函数来提高速度，可使用-fno-builtin来避免。
各种地址引用

模块内部   相对跳转和调用        相对地址访问
模块外部   间接跳转和调用（GOT） 间接访问（GOT）
-fpic 指示GCC产生地址无关代码，产生代码相对较快，较小，但跟硬件平台相关
-fPIC 通常使用这个产生地址无关代码

如何判断一个动态文件是否是PIC，只要产看有没有任何代码重定位段，TEXTREL表示代码段重定位表地址。

地址无关技术也可应用于普通可执行程序,-fPIE或-fpie`


